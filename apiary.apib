FORMAT: X-1A

# Gamification
This is a Gamification API. It lets applications track players, events, badges, rules and leaderboards.

# Group Application
The application is the base model for your project. When using the gamification API, you should create an application and then use its ID whenever you manipulate other resources.

## Application [/applications/{id}]

An Application is something that contains players, rules, badges and a leaderboard. This is the base resource for your gamification project.

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Application`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body

            {
               "description": "bla",
               "events":
               [
                   "http://localhost:8080/Gamification/api/events/10"
               ],
               "id": 6,
               "name": "EventApp",
               "players":
               [
                   "http://localhost:8080/Gamification/api/players/9"
               ]
            }

### Retrieve an Application [GET]
This method is used to retrieve an `Application` resource by specifying its unique id.

+ Request

    + Header
            
            id: 6

+ Response 200

    [Application][]

### Delete an Application [DELETE]
This method is used to delete an `Application` resource by specifying its unique id.

+ Request
    
    + Header
    
            id: 6

+ Response 204

## Applications Collection [/applications/]

An Applications Collection is a list of applications.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body

            [
               {
                   "description": "bla",
                   "events":
                   [
                       "http://localhost:8080/Gamification/api/events/3"
                   ],
                   "id": 1,
                   "name": "mon application",
                   "players":
                   [
                       "http://localhost:8080/Gamification/api/players/2"
                   ]
               },
               {
                   "description": "bla",
                   "events":
                   [
                       "http://localhost:8080/Gamification/api/events/10"
                   ],
                   "id": 6,
                   "name": "EventApp",
                   "players":
                   [
                       "http://localhost:8080/Gamification/api/players/9"
                   ]
               }
            ]



### Create an Application [POST] 
This method is used to create an `Application` resource by specifying its name, description, apiKey and apiSecret.

+ Request Update JSON Message (application/json)

        {
           "name": "mon application",
           "description": "bla",
           "events":
           [
              
           ],
           "players":
           [
               
           ]
        }


    
+ Response 200

            {
                "url": "http://localhost:8080/Gamification/api/applications/1"
            }

### Update an Application [PUT]
This method is used to update a `Application` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    + Header
            
            id: 6
            
    + Body
        
            {
               "description": "bla",
               "events":
               [
                   {"id": 10}
               ],
               "id": 6,
               "name": "Modified name",
               "players":
               [
                   {"id": 9}
               ]
            }

+ Response 204
                
### Retrieve a list of Applications [GET]
This method is used to retrieve a `List of Application` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Applications Collection][]

# Group Event
An `Event` is an action that a player performed at some point in time.
An event has a type, a player and a time.

## Event [/events/{id}]

An Event is something that a player did at some point in time.

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Event`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body

            {
               "application": "http://localhost:8080/Gamification/api/applications/6",
               "id": 10,
               "player": "http://localhost:8080/Gamification/api/players/9",
               "time": "2013-11-08T11:34:24.342",
               "type": 10
            }




### Retrieve an Event [GET]
This method is used to retrieve an `Event` resource by specifying its unique id.

+ Request

    + Header

            id: 1
        
+ Response 200

    [Event][]

### Delete an Event [DELETE]
This method is used to delete an `Event` resource by specifying its unique id.

+ Request

    + Header

            id: 1
            
+ Response 204


## Events Collection [/events/]

An Events Collection is a list of events.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body

            [
               {
                   "application": "http://localhost:8080/Gamification/api/applications/6",
                   "id": 10,
                   "player": "http://localhost:8080/Gamification/api/players/9",
                   "time": "2013-11-08T11:34:24.342",
                   "type": 10
               },
               {
                   "application": "http://localhost:8080/Gamification/api/applications/6",
                   "id": 11,
                   "player": "http://localhost:8080/Gamification/api/players/9",
                   "time": "2013-11-08T12:43:24.342",
                   "type": 13
               }
            ]


                
### Create an Event [POST]
This method is used to create an `Event` resource by specifying its player and type.
The time of the event will automatically be set to the insertion time. There is no need to specify it.
Creating an event can trigger the award of points or a badge if there exists a `Rule` for the same type of event.

+ Request Update JSON Message (application/json)

    + Header

            id: 1
            
    + Body
    
            {
              "type": 22,
              "player": {"id": 9}
            }
    
+ Response 200

            {
                "url": "http://localhost:8080/Gamification/api/events/10"
            }

### Update an Event [PUT]
This method is used to update a `Event` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    + Header

            id: 1
    + Body
    
            {
              "id": 10,
              "type": 22,
              "player": {"id": 9}
            }

+ Response 204
    
### Retrieve a list of Events [GET]
This method is used to retrieve a `List of Event` resource.

+ Request

    + Header

            id: 1
            
+ Response 200

    [Events Collection][]
    

# Group Player

A player is a person that takes part in the game. A player has a firstName, a lastName, an email and a number of points.
A player can also have `Badge`s.

## Player [/players/{id}]

A Player is person who is part of the game.

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Player`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
               "application": "http://localhost:8080/Gamification/api/applications/6",
               "badges":
               [
                   "http://localhost:8080/Gamification/api/badges/7"
               ],
               "email": "js@master.hes-so.ch",
               "events":
               [
                   "http://localhost:8080/Gamification/api/events/10"
               ],
               "firstName": "John",
               "id": 9,
               "lastName": "Smith",
               "numberOfPoints": 50
            }

### Retrieve a Player [GET]
This method is used to retrieve a `Player` resource by specifying its unique id.

+ Request

    + Header
            
            id: 1
            
+ Response 200

    [Player][]


### Delete a Player [DELETE]
This method is used to delete a `Player` resource by specifying its unique id.

+ Request

    + Header
            
            id: 1
            
+ Response 204


## Players Collection [/players/]

A Players Collection is a list of Players.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body

            [
               {
                   "application": "http://localhost:8080/Gamification/api/applications/6",
                   "badges":
                   [
                       "http://localhost:8080/Gamification/api/badges/7"
                   ],
                   "email": "js@master.hes-so.ch",
                   "events":
                   [
                       "http://localhost:8080/Gamification/api/events/10"
                   ],
                   "firstName": "John",
                   "id": 9,
                   "lastName": "Smith",
                   "numberOfPoints": 50
               },
               {
                   "application": "http://localhost:8080/Gamification/api/applications/6",
                   "badges":
                   [
                   ],
                   "email": "asdf@foobar.ch",
                   "events":
                   [
                       "http://localhost:8080/Gamification/api/events/11"
                   ],
                   "firstName": "Arthur",
                   "id": 18,
                   "lastName": "Duras",
                   "numberOfPoints": 181
               }
            ]



### Create a Player [POST]
This method is used to create a `Player` resource by specifying its fistName, lastName and email
    
+ Request

    + Header
    
            id: 1
            
    + Body
            
            {
              "firstName": "John",
              "lastName": "Smith",
              "email": "john.smith@foo-bar.tld",
              "numberOfPoints": 500,
              "badges": 
              [
              ]
            }
    
+ Response 200

            {
                "url": "http://localhost:8080/Gamification/api/players/13"
            }

### Update a Player [PUT]
This method is used to update a `Player` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    + Header
    
            id: 1
            
    + Body
    
            {
              "id": 13,
              "firstName": "John",
              "lastName": "Smith",
              "email": "john.smith@foo-bar.tld",
              "numberOfPoints": 500,
              "badges": 
              [
              ]
            }

+ Response 204
    
### Retrieve a list of Players [GET]
This method is used to retrieve a `List of Player` resource.

+ Request

    + Header
    
            id: 1
            
+ Response 200

    [Players Collection][]

# Group Badge
A player can have different badges (a badge of honor, a badge of widsom).

## Badge [/badges/{id}]

A Badge is something that a player is awarded following a given event acknowleged by a rule.

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Event`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
               "description": "Badge awarded to players who have proved their honor.",
               "icon": "http://...",
               "id": 7,
               "name": "badge of honor",
               "players":
               [
                   "http://localhost:8080/Gamification/api/players/9"
               ]
            }


### Retrieve a Badge [GET]
This method is used to retrieve a `Badge` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Request

    + Header
    
            id: 1

+ Response 200

    [Badge][]

### Delete a Badge [DELETE]
This method is used to delete a `Badge` resource by specifying its unique id.

+ Request

    + Header

            id: 1
        
+ Response 204


## Badges Collection [/badges/]

A Badges Collection is a list of badges.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
               {
                   "description": "Badge awarded to players who have proved their honor.",
                   "icon": "http://...",
                   "id": 7,
                   "name": "Badge of honor",
                   "players":
                   [
                       "http://localhost:8080/Gamification/api/players/9"
                   ]
               },
               {
                   "description": "Badge awarded to players who have proved their wisdom.",
                   "icon": "http://...",
                   "id": 8,
                   "name": "Badge of wisdom",
                   "players":
                   [
                       "http://localhost:8080/Gamification/api/players/9"
                   ]
               }
            ]


            
### Create a Badge [POST]
This method is used to create a `Badge` resource by specifying its name, description and icon.
+ Request

    + Header
    
            id: 1
    
    + Body
        
            {
              "name": "Badge of Honor",
              "description": "Badge awarded to players who have proved their honor.",
              "icon" : "http://..."
            }

+ Response 200

            {
                "url": "http://localhost:8080/Gamification/api/badges/19"
            }
            
### Update a Badge [PUT]
This method is used to update a `Badge` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)
    
    + Header
            
            id: 1

    + Body

            {
              "id" : 7,
              "name": "Badge of Honor modified",
              "description": "Badge awarded to players who have proved their honor.",
              "icon" : "http://..."
            }

+ Response 204
    
### Retrieve a list of Badges [GET]
This method is used to retrieve a `List of Badge` resource.
+ Request

    + Header
        
            id: 1
            
+ Response 200

    [Badges Collection][]

# Group Rule
A Rule is something that describes that a specific type of event triggers the award of a badge and/or a given number of points.
One must specify the application id that is related to the rules that one wants to manipulate as an HTTP header called "id".


## Rule [/rules/{id}]


+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Rule`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
               "application": "http://localhost:8080/Gamification/api/applications/6",
               "badge": "http://localhost:8080/Gamification/api/badges/7",
               "id": 8,
               "numberOfPoints": 50,
               "onEventType": 10
            }




### Retrieve a Rule [GET]
This method is used to retrieve a `Rule` resource by specifying its unique id.
+ Request

    + Headers
            
            "id": 1

+ Response 200

    [Rule][]

### Delete a Rule [DELETE]
This method is used to delete a `Rule` resource by specifying its unique id.
+ Request

    + Headers
            
            "id": 1
            
+ Response 204


## Rules Collection [/rules/]

A Rules Collection is a list of rules.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body

            [
               {
                   "application": "http://localhost:8080/Gamification/api/applications/6",
                   "badge": "http://localhost:8080/Gamification/api/badges/7",
                   "id": 8,
                   "numberOfPoints": 50,
                   "onEventType": 10
               },
               {
                   "application": "http://localhost:8080/Gamification/api/applications/6",
                   "badge": "http://localhost:8080/Gamification/api/badges/7",
                   "id": 13,
                   "numberOfPoints": 50,
                   "onEventType": 10
               },
               {
                   "application": "http://localhost:8080/Gamification/api/applications/6",
                   "badge": "http://localhost:8080/Gamification/api/badges/4",
                   "id": 14,
                   "numberOfPoints": 50,
                   "onEventType": 11
               }
            ]



### Create a Rule [POST]
This method is used to create a `Rule` resource by specifying its name, description and icon.
+ Request

    + Header
    
            id: 1
    + Body
    
            {
               "badge": {"id": 4 },
               "numberOfPoints": 50,
               "onEventType": 11
            }
            
            
+ Response 200

            {
                "url": "http://localhost:8080/Gamification/api/rules/37"
            }   

### Update a Rule [PUT]
This method is used to update a `Rule` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    + Headers
            
            "id": 1
    
    + Body
    
            {
               "id": 14,
               "badge": {"id": 4 },
               "numberOfPoints": 50,
               "onEventType": 999
            }

+ Response 204
    
### Retrieve a list of Rules [GET]
This method is used to retrieve a `List of Rule` resource.

+ Request

    + Headers
            
            "id": 1

+ Response 200

    [Rules Collection][]

# Group LeaderBoard

Every application has its single Leaderboard that is automatically generated by the API. You can only GET the Leaderboard.

## LeaderBoard [/leaderboard]

A LeaderBoard is something that contains a player ranking according to their number of points.
One must specify the application id for which one wants the leaderboard as an HTTP header called "id".

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body

            {
               "players":
               [
                   {
                       "numberOfPoints": 178,
                       "url": "http://localhost:8080/Gamification/api/players/11"
                   },
                   {
                       "numberOfPoints": 50,
                       "url": "http://localhost:8080/Gamification/api/players/9"
                   },
                   {
                       "numberOfPoints": 17,
                       "url": "http://localhost:8080/Gamification/api/players/12"
                   }
               ]
            }




### Retrieve the LeaderBoard [GET]
This method is used to retrieve the `LeaderBoard` for a given application.
+ Request

    + Header
    
            id: 1
        
+ Response 200

    [LeaderBoard][]