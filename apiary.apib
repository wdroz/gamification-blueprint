FORMAT: X-1A

# Introduction
This is an introduction section, where you should describe the overall purpose of the API and some of the important concepts and abstractions.
## TEAM
    Amiet Nils
    Droz William
    Wenk Nicolas
<!-- == RESOURCE GROUP: Fruit and Fruits Collection ======================================================================== -->

# Group Application
In my domain model, I am dealing with fruits. I have two distinct resources in that context. The first resource is the `Fruit` resource, which represent a single fruit (a banana, an apple or a kiwi). The second resource the `Fruits Collection` resource, which represents a collection of fruits (in other words, 0, 1 or many fruits).


## Application [/applications/{id}]

An Application is something that you can eat and that is delicious. This is just an example to show that in the API documentation, we have a place where we can describe the resource types, which are in essence the elements of our domain models. 


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Application`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "name": "www.developpez.com",
              "description": "bla",
              "apiKey" : "0xdeadbeef",
              "apiSecret" : "codeurFou"
              }
            }


### Retrieve an Application [GET]
This method is used to retrieve an `Application` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Application][]

### Create an Application [POST]
This method is used to create an `Application` resource by specifying its name, description, apiKey and apiSecret.

+ Response 200

    [Application][]

### Update an Application [PUT]
This method is used to update a `Application` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Application][]

+ Response 204

### Delete an Application [DELETE]
This method is used to delete an `Application` resource by specifying its unique id.

+ Response 204


## Applications Collection [/applications/]

An Applications Collection is a list of applications.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
                {
                    "name": "www.developpez.com",
                    "description": "site de developpement logiciel et IT"
                },
                {
                    "name": "www.perdu.com",
                    "description": "site mieux que google.ch"
                },
                {
                   "name": "www.google.ch",
                   "description": "site mieux que perdu.com"
                }
            ]
                
### Retrieve a list of Applications [GET]
This method is used to retrieve a `List of Application` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Applications Collection][]

# Group Event
In my domain model, I am dealing with fruits. I have two distinct resources in that context. The first resource is the `Fruit` resource, which represent a single fruit (a banana, an apple or a kiwi). The second resource the `Fruits Collection` resource, which represents a collection of fruits (in other words, 0, 1 or many fruits).


## Event [/events/{id}]

An Event is something that you can eat and that is delicious. This is just an example to show that in the API documentation, we have a place where we can describe the resource types, which are in essence the elements of our domain models. 


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Event`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "application": "1",
              "player": "5",
              "type" : "entier",
              "timestamp" : "123456789"
            }


### Retrieve an Event [GET]
This method is used to retrieve an `Event` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Event][]

### Create an Event [POST]
This method is used to create an `Event` resource by specifying its application, player and type.

+ Response 200

    [Event][]

### Update an Event [PUT]
This method is used to update a `Event` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Event][]

+ Response 204

### Delete an Event [DELETE]
This method is used to delete an `Event` resource by specifying its unique id.

+ Response 204


## Events Collection [/events/]

An Events Collection is a list of events.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
                {
                     "application": "1",
                     "player": "5",
                     "type" : "entier",
                     "timestamp" : "123456789"
                },
                {
                     "application": "2",
                     "player": "1",
                     "type" : "entier",
                     "timestamp" : "123456789"
                },
                {
                    "application": "3",
                    "player": "4",
                    "type" : "entier",
                    "timestamp" : "123456789"
                }
            ]
                
### Retrieve a list of Events [GET]
This method is used to retrieve a `List of Event` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Events Collection][]
    

# Group Player

In my domain model, I am dealing with fruits. I have two distinct resources in that context. The first resource is the `Fruit` resource, which represent a single fruit (a banana, an apple or a kiwi). The second resource the `Fruits Collection` resource, which represents a collection of fruits (in other words, 0, 1 or many fruits).


## Player [/players/{id}]

An Player is something that you can eat and that is delicious. This is just an example to show that in the API documentation, we have a place where we can describe the resource types, which are in essence the elements of our domain models. 


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Player`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "firstName": "John",
              "lastName": "Smith",
              "email" : "john.smith@master.hes-so.ch",
              "numberOfPoints" : "10",
              "badges" : 
              [
                "http://...",
                "http://...",
                "http://..."
              ]
            }


### Retrieve a Player [GET]
This method is used to retrieve a `Player` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Player][]

### Create a Player [POST]
This method is used to create a `Player` resource by specifying its fistName, lastName and email
.
+ Response 200

    [Player][]

### Update a Player [PUT]
This method is used to update a `Player` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Player][]

+ Response 204

### Delete a Player [DELETE]
This method is used to delete a `Player` resource by specifying its unique id.

+ Response 204


## Players Collection [/players/]

A Players Collection is a list of Players.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
                 {
                  "firstName": "John",
                  "lastName": "Smith",
                  "email" : "john.smith@master.hes-so.ch",
                  "numberOfPoints" : "10",
                  "badges" : 
                  [
                    "http://...",
                    "http://...",
                    "http://..."
                  ]
                },
                {
                  "firstName": "John",
                  "lastName": "TheRipper",
                  "email" : "john.theripper@master.hes-so.ch",
                  "numberOfPoints" : "100",
                  "badges" : 
                  [
                    "http://...",
                    "http://...",
                    "http://..."
                  ]
                },
            ]
                
### Retrieve a list of Players [GET]
This method is used to retrieve a `List of Player` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Players Collection][]

# Group Badge
In my domain model, I am dealing with fruits. I have two distinct resources in that context. The first resource is the `Fruit` resource, which represent a single fruit (a banana, an apple or a kiwi). The second resource the `Fruits Collection` resource, which represents a collection of fruits (in other words, 0, 1 or many fruits).


## Badge [/badges/{id}]

A Badge is something that you can eat and that is delicious. This is just an example to show that in the API documentation, we have a place where we can describe the resource types, which are in essence the elements of our domain models. 


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Event`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "name": "Badge of honor",
              "description": "Badge awarded to players who have proved their honor.",
              "icon" : "http://..."
            }


### Retrieve a Badge [GET]
This method is used to retrieve a `Badge` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Badge][]

### Create an Badge [POST]
This method is used to create a `Badge` resource by specifying its name, description and icon.

+ Response 200

    [Badge][]

### Update a Badge [PUT]
This method is used to update a `Badge` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Badge][]

+ Response 204

### Delete an Badge [DELETE]
This method is used to delete a `Badge` resource by specifying its unique id.

+ Response 204


## Badges Collection [/badges/]

A Badges Collection is a list of badges.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
    
                {
                  "name": "Badge of honor",
                  "description": "Badge awarded to players who have proved their honor.",
                  "icon" : "http://..."
                },
    
                {
                  "name": "Badge of wisdom",
                  "description": "Badge awarded to players who have proved their wisdom.",
                  "icon" : "http://..."
                }                
            ]
                
### Retrieve a list of Badges [GET]
This method is used to retrieve a `List of Badge` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Badges Collection][]

# Group Rule
In my domain model, I am dealing with fruits. I have two distinct resources in that context. The first resource is the `Rule` resource, which represent a single fruit (a banana, an apple or a kiwi). The second resource the `Rule Collection` resource, which represents a collection of fruits (in other words, 0, 1 or many fruits).


## Rule [/rules/{id}]

A Rule is something that you can eat and that is delicious. This is just an example to show that in the API documentation, we have a place where we can describe the resource types, which are in essence the elements of our domain models. 


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Rule`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "onEventType": "xxx",
              "numberOfPoints": "50",
              "badge" : "http://..."
            }


### Retrieve a Rule [GET]
This method is used to retrieve a `Rule` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Rule][]

### Create an Rule [POST]
This method is used to create a `Rule` resource by specifying its name, description and icon.

+ Response 200

    [Rule][]

### Update a Rule [PUT]
This method is used to update a `Rule` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Rule][]

+ Response 204

### Delete an Rule [DELETE]
This method is used to delete a `Rule` resource by specifying its unique id.

+ Response 204


## Rules Collection [/rules/]

A Rules Collection is a list of rules.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
    
                {
                  "onEventType": "xxx",
                  "numberOfPoints": "50",
                  "badge" : "http://..."
                },
                {
                  "onEventType": "yyy",
                  "numberOfPoints": "25",
                  "badge" : "http://..."
                }              
            ]
                
### Retrieve a list of Rules [GET]
This method is used to retrieve a `List of Rule` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Rules Collection][]

