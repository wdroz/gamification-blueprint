FORMAT: X-1A

# Gamification
This is a Gamification API. It lets applications track players, events, bades, rules and leaderboards.

## TEAM
    Amiet Nils
    Droz William
    Wenk Nicolas

# Group Application
In my domain model, I am dealing with applications. I have two distinct resources in that context. The first resource is the `Application` resource, which represent a single application. The second resource the `Applications Collection` resource, which represents a collection of applications (in other words, 0, 1 or many applications).


## Application [/applications/{id}]

An Application is something that contains players, rules, bades and leaderboards. This is the base resource for your gamification project.


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Application`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "name": "www.developpez.com",
              "description": "bla",
              "apiKey" : "0xdeadbeef",
              "apiSecret" : "codeurFou"
            }


### Retrieve an Application [GET]
This method is used to retrieve an `Application` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Application][]

### Update an Application [PUT]
This method is used to update a `Application` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Application][]

+ Response 204

### Delete an Application [DELETE]
This method is used to delete an `Application` resource by specifying its unique id.

+ Response 204

## Applications Collection [/applications/]

An Applications Collection is a list of applications.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
                {
                    "name": "www.developpez.com",
                    "description": "site de developpement logiciel et IT"
                },
                {
                    "name": "www.perdu.com",
                    "description": "site mieux que google.ch"
                },
                {
                   "name": "www.google.ch",
                   "description": "site mieux que perdu.com"
                }
            ]

### Create an Application [POST] 
This method is used to create an `Application` resource by specifying its name, description, apiKey and apiSecret.

+ Response 200

    [Application][]
                
### Retrieve a list of Applications [GET]
This method is used to retrieve a `List of Application` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Applications Collection][]

# Group Event
In my domain model, I am dealing with events. I have two distinct resources in that context. The first resource is the `Event` resource, which represent a single event (a specific number of points achievment, etc.). The second resource the `Events Collection` resource, which represents a collection of events (in other words, 0, 1 or many events).


## Event [/events/{id}]

An Event is something that a player did at some point in time. 


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Event`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "type": 222,
              "application": {"id": 1},
              "player": {"id": 3}
            }


### Retrieve an Event [GET]
This method is used to retrieve an `Event` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Event][]

### Update an Event [PUT]
This method is used to update a `Event` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Event][]

+ Response 204

### Delete an Event [DELETE]
This method is used to delete an `Event` resource by specifying its unique id.

+ Response 204


## Events Collection [/events/]

An Events Collection is a list of events.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
                {
                     "application": "1",
                     "player": "5",
                     "type" : "entier",
                     "timestamp" : "123456789"
                },
                {
                     "application": "2",
                     "player": "1",
                     "type" : "entier",
                     "timestamp" : "123456789"
                },
                {
                    "application": "3",
                    "player": "4",
                    "type" : "entier",
                    "timestamp" : "123456789"
                }
            ]
                
### Create an Event [POST]
This method is used to create an `Event` resource by specifying its application, player and type.

+ Response 200

    [Event][]
    
### Retrieve a list of Events [GET]
This method is used to retrieve a `List of Event` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Events Collection][]
    

# Group Player

In my domain model, I am dealing with players. I have two distinct resources in that context. The first resource is the `Player` resource, which represent a single player. The second resource the `Players Collection` resource, which represents a collection of players (in other words, 0, 1 or many players).


## Player [/players/{id}]

An Player is person who is part of the game.


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Player`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "firstName": "John",
              "lastName": "Smith",
              "application": {"id":1},
              "email" : "john.smith@master.hes-so.ch",
              "numberOfPoints" : "10",
              "badges" : 
              [
              ]
            }


### Retrieve a Player [GET]
This method is used to retrieve a `Player` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Player][]

### Update a Player [PUT]
This method is used to update a `Player` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Player][]

+ Response 204

### Delete a Player [DELETE]
This method is used to delete a `Player` resource by specifying its unique id.

+ Response 204


## Players Collection [/players/]

A Players Collection is a list of Players.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
                 {
                  "firstName": "John",
                  "lastName": "Smith",
                  "email" : "john.smith@master.hes-so.ch",
                  "numberOfPoints" : "10",
                  "badges" : 
                  [
                    "http://...",
                    "http://...",
                    "http://..."
                  ]
                },
                {
                  "firstName": "John",
                  "lastName": "TheRipper",
                  "email" : "john.theripper@master.hes-so.ch",
                  "numberOfPoints" : "100",
                  "badges" : 
                  [
                    "http://...",
                    "http://...",
                    "http://..."
                  ]
                },
            ]

### Create a Player [POST]
This method is used to create a `Player` resource by specifying its fistName, lastName and email
.
+ Response 200

    [Player][]
    
### Retrieve a list of Players [GET]
This method is used to retrieve a `List of Player` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Players Collection][]

# Group Badge
In my domain model, I am dealing with badges. I have two distinct resources in that context. The first resource is the `Badge` resource, which represent a single bade (a badge of honor, a badge of widsom). The second resource the `Badges Collection` resource, which represents a collection of badges (in other words, 0, 1 or many badges).


## Badge [/badges/{id}]

A Badge is something that a player is awarded following a given event acknowleged by a rule.


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Event`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "name": "Badge of honor",
              "description": "Badge awarded to players who have proved their honor.",
              "icon" : "http://...",
              "application" : {"id" : 1}
            }


### Retrieve a Badge [GET]
This method is used to retrieve a `Badge` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Badge][]

### Update a Badge [PUT]
This method is used to update a `Badge` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Badge][]

+ Response 204

### Delete an Badge [DELETE]
This method is used to delete a `Badge` resource by specifying its unique id.

+ Response 204


## Badges Collection [/badges/]

A Badges Collection is a list of badges.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
    
                {
                  "name": "Badge of honor",
                  "description": "Badge awarded to players who have proved their honor.",
                  "icon" : "http://..."
                },
    
                {
                  "name": "Badge of wisdom",
                  "description": "Badge awarded to players who have proved their wisdom.",
                  "icon" : "http://..."
                }                
            ]
            
### Create an Badge [POST]
This method is used to create a `Badge` resource by specifying its name, description and icon.

+ Response 200

    [Badge][]
    
### Retrieve a list of Badges [GET]
This method is used to retrieve a `List of Badge` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Badges Collection][]

# Group Rule
In my domain model, I am dealing with rules. I have two distinct resources in that context. The first resource is the `Rule` resource, which represent a single rule. The second resource the `Rules Collection` resource, which represents a collection of rules (in other words, 0, 1 or many rules).


## Rule [/rules/{id}]

A Rule is something that describes which event triggers the award of which badge.


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `Rule`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "onEventType": "xxx",
              "numberOfPoints": "50",
              "badge" : "http://..."
            }


### Retrieve a Rule [GET]
This method is used to retrieve a `Rule` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Rule][]

### Update a Rule [PUT]
This method is used to update a `Rule` resource by specifying its unique id and sending a new representation.

+ Request Update JSON Message (application/json)

    [Rule][]

+ Response 204

### Delete an Rule [DELETE]
This method is used to delete a `Rule` resource by specifying its unique id.

+ Response 204


## Rules Collection [/rules/]

A Rules Collection is a list of rules.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
    
                {
                  "onEventType": "xxx",
                  "numberOfPoints": "50",
                  "badge" : "http://..."
                },
                {
                  "onEventType": "yyy",
                  "numberOfPoints": "25",
                  "badge" : "http://..."
                }              
            ]

### Create an Rule [POST]
This method is used to create a `Rule` resource by specifying its name, description and icon.

+ Response 200

    [Rule][]    
    
### Retrieve a list of Rules [GET]
This method is used to retrieve a `List of Rule` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [Rules Collection][]

# Group LeaderBoard

In my domain model, I am dealing with leaderboards. I have two distinct resources in that context. The first resource is the `LeaderBoard` resource, which represent a single leaderboard (a top points leaderboard, a top badges leaderboard). The second resource the `LeaderBoards Collection` resource, which represents a collection of leaderboards (in other words, 0, 1 or many leaderboards).


## LeaderBoard [/leaderBoards/{id}]

A LeaderBoard is something that contains a player ranking according to a given criterion.


<!-- We can describe parameters and reference them in method calls, later in the document -->

+ Parameters

    + id (number, `1`) ... An identifier that uniquely identifies a `LeaderBoard`.


+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            {
              "name": "top points",
              "description": "leaderboard for ...",
              "application" : "xxx",
              "ranking" : 
              [
                {
                    "player" : "John",
                    "points" : "100"
                },
                {
                    "player" : "Timmy",
                    "points" : "50"
                },
              ]
            }


### Retrieve a LeaderBoard [GET]
This method is used to retrieve a `LeaderBoard` resource by specifying its unique id. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [LeaderBoard][]

### Delete a LeaderBoard [DELETE]
This method is used to delete a `LeaderBoard` resource by specifying its unique id.

+ Response 204


## LeaderBoards Collection [/leaderboards/]

A LeaderBoards Collection is a list of LeaderBoards.

+ Model (application/json)

    This is the `application/json` message resource representation.

    + Body
    
            [
                {
                  "name": "top points",
                  "description": "leaderboard for ...",
                  "application" : "xxx",
                  "ranking" : 
                  [
                    {
                        "player" : "John",
                        "points" : "100"
                    },
                    {
                        "player" : "Timmy",
                        "points" : "50"
                    },
                  ]
                },
                {
                  "name": "top badges",
                  "description": "leaderboard for ...",
                  "application" : "xxx",
                  "ranking" : 
                  [
                    {
                        "player" : "John",
                        "points" : "3"
                    },
                    {
                        "player" : "Timmy",
                        "points" : "2"
                    },
                  ]
                }
            ]

### Retrieve a list of LeaderBoards [GET]
This method is used to retrieve a `List of LeaderBoard` resource. Note that we reference the resource model in the `Response 200` block.

+ Response 200

    [LeaderBoards Collection][]
